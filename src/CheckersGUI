import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;


public class CheckersGui implements MouseListener, ActionListener {
	
	private JFrame frame;
	private JPanel boardpanel;
	private JLabel piecesLabel;
	private JMenuBar menubar;
	private JMenu fileMenu;
	private JMenuItem newGame;
	private JMenuItem exit;
	
	private Color currentTurn;
	
	private final int borderWidth = 1;
	
	private Board board;
	
	private int blackCheckersLeft;
	private int redCheckersLeft;
	private Square selectedSquare;
		
	
	public CheckersGui() {
		InitializeGUI();
		
		currentTurn = Color.GREEN;
		
		redCheckersLeft = 12;
		blackCheckersLeft = 12;
		
		updateGameStatus();
	}
	
	public void InitializeGUI() {
		frame = new JFrame("Gui Frame");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLayout(new FlowLayout());
		
		frame.getContentPane().setLayout(
				new BoxLayout(frame.getContentPane(), BoxLayout.Y_AXIS));
		
		boardpanel = new JPanel(new GridLayout(8, 8));
		boardpanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		
		board = new Board();
		board.initializePieces();
		
		piecesLabel = new JLabel(" ");
		piecesLabel.setHorizontalTextPosition(JLabel.LEFT);
		piecesLabel.setVerticalTextPosition(JLabel.BOTTOM);
		
		menubar = new JMenuBar();
		fileMenu = new JMenu("File");
		
		newGame = new JMenuItem("New Game");
		newGame.addActionListener(this);
		
		exit = new JMenuItem("Exit");
		exit.addActionListener(this);
		
		fileMenu.add(newGame);
		fileMenu.add(exit);
		menubar.add(fileMenu);

		setBoard(board, boardpanel);
		frame.add(boardpanel);
		frame.add(piecesLabel);
		frame.setJMenuBar(menubar);
		frame.pack();
		
		Rectangle boundingRect = frame.getBounds();
		frame.setBounds(boundingRect.x, boundingRect.y, boundingRect.width + 5, boundingRect.height);
		frame.setVisible(true);
	}
	
	@Override
	public void mouseClicked(MouseEvent e) {
		Square sel = (Square)e.getComponent();

		if(sel.hasPiece()) 
			if(sel.getPiece().getColor() != currentTurn &&
				currentTurn != Color.GREEN) {
			piecesLabel.setText("Ash! This isn't the time to use that!");
			return;
		}
		
		if (sel.hasPiece() && selectedSquare == null) {
			selectedSquare = sel;
			selectedSquare.setHighlight(true);
			board.highlightMoves(selectedSquare.getPiece(), true);
			return;
		} else if (sel.hasPiece() && !sel.equals(selectedSquare)) {
			selectedSquare.setHighlight(false);
			board.highlightMoves(selectedSquare.getPiece(), false);
			
			selectedSquare = sel;
			selectedSquare.setHighlight(true);
			board.highlightMoves(selectedSquare.getPiece(), true);
			return;
			
		} else if (sel.equals(selectedSquare)) {
			selectedSquare.setHighlight(false);
			board.highlightMoves(selectedSquare.getPiece(), false);
			selectedSquare = null;
		} else if (!sel.hasPiece() && selectedSquare != null) {
			boolean found = false;
			boolean jumped = false;
			
			Vector<Square> oldPossibleMoves = board.possibleMoves(selectedSquare.getPiece());
			
			for (Square choice : oldPossibleMoves) {
				if (choice.equals(sel)) {
					if (currentTurn == Color.GREEN)
						currentTurn = selectedSquare.getPiece().getColor();
					jumped = board.move(selectedSquare, sel);
					found = true;
				}
			}
			
			if (found) {
				if (jumped) {
					if (currentTurn == Color.BLACK) {
						redCheckersLeft--;
					}
					else {
						blackCheckersLeft--;
					}
				}
				
				selectedSquare.setHighlight(false);
				for (Square unhighlight : oldPossibleMoves) {
					unhighlight.setHighlight(false);
				}
				selectedSquare = null;
				
				nextTurn();
				updateGameStatus();
				
				String winningStr = getWinner();
				if (winningStr != null) {
					int restart = JOptionPane.showConfirmDialog(null, winningStr + " Do you want to begin a new game?", "New Game?", JOptionPane.YES_NO_OPTION);
					
					if (restart == JOptionPane.YES_OPTION) {
						restartGame();
					}
					else {
						frame.setVisible(false);
						frame.dispose();
					}
				}
			}
			else if (!found) {
				piecesLabel.setText("You are able to move");
			}
		}
	}

	public void mouseEntered(MouseEvent e) {}
	public void mouseExited(MouseEvent e) {}
	public void mousePressed(MouseEvent e) {}
	public void mouseReleased(MouseEvent e) {}
	
	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == newGame) {
			restartGame();
		}
		else if(e.getSource() == exit) {
			frame.setVisible(false);
			frame.dispose();
		}
		
	}
		
	public void restartGame() {
		frame.setVisible(false);
		selectedSquare = null;
		
		frame.remove(boardpanel);
		boardpanel = new JPanel(new GridLayout(8, 8));
		boardpanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		
		board = new Board();
		board.initializePieces();
		
		setBoard(board, boardpanel);
		frame.add(boardpanel, 0);
		
		redCheckersLeft = 12;
		blackCheckersLeft = 12;
		
		currentTurn = Color.BLACK;
		
		updateGameStatus();
		frame.pack();
		frame.setVisible(true);
	}

	public void setBoard(Board b, JPanel p) {
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				Square sq = b.getSquare(i, j);
				sq.addMouseListener(this);
				
				JPanel ContainerPanel = new JPanel(new FlowLayout());
				ContainerPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK,
																					borderWidth));
				ContainerPanel.add(sq);
				if (sq.getBackgroundColor() == Square.BackgroundColor.DARK) {
					ContainerPanel.setBackground(Color.DARK_GRAY);
				}
				else {
					ContainerPanel.setBackground(Color.LIGHT_GRAY);
				}
				p.add(ContainerPanel);
			}
		}
	}
	
	public void updateGameStatus() {
		piecesLabel.setText("Red Pieces Left: " + redCheckersLeft + "             Black Pieces Left: " + blackCheckersLeft);
	}
	
	public String getWinner() {
		
		if (blackCheckersLeft == 0) {
			return "Red has won";
		}
			
		if (redCheckersLeft == 0) {
			return "Black has won";		
		}

		boolean redCanMove = false;
		boolean blackCanMove = false;
		
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				if (board.getSquare(i, j).hasPiece()) {
					Vector<Square> potentialMoves = board.possibleMoves(board.getSquare(i, j).getPiece());
					if (!potentialMoves.isEmpty()) {
						if (board.getSquare(i, j).getPiece().getColor() == Color.black) {
							blackCanMove = true;
						}
						else {
							redCanMove = true;
						}
					}
				}
			}
		}
		
		if (redCanMove && !blackCanMove) {
			return "Red team wins!";
		}
		else if (blackCanMove && !redCanMove) {
			return "Black team wins!";
		}
		else if (!redCanMove && !blackCanMove) {
			return "Neither side wins!";
		}
		
		return null;
	}
	
	public void nextTurn() {
		if(currentTurn == Color.BLACK) {
			currentTurn = Color.RED;
		}
		else {
			currentTurn = Color.BLACK;
		}
	}

	public static void main(String[] args) {
		new CheckersGui();
	}
}
